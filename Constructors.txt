//1.Write a class with a default constructor, one argument constructor and two argument constructors. Instantiate the class to call all the constructors of that class from a main class


class MyClass:
    def __init__(self, arg1=None, arg2=None):
        if arg1 is None and arg2 is None:
            print("Default constructor called")
        elif arg2 is None:
            print(f"One-argument constructor called with arg1: {arg1}")
        else:
            print(f"Two-argument constructor called with arg1: {arg1}, arg2: {arg2}")
if __name__ == "__main__":
    obj1 = MyClass()            
    obj2 = MyClass(10)         
    obj3 = MyClass(10, 20) 

//2.Call the constructors(both default and argument constructors) of super class from a child class


class SuperClass:
    def __init__(self, arg1=None, arg2=None):
        if arg1 is None and arg2 is None:
            print("SuperClass: Default constructor called")
        elif arg2 is None:
            print(f"SuperClass: One-argument constructor called with arg1: {arg1}")
        else:
            print(f"SuperClass: Two-argument constructor called with arg1: {arg1}, arg2: {arg2}")

class ChildClass(SuperClass):
    def __init__(self, arg1=None, arg2=None):
        if arg1 is None and arg2 is None:
            super().__init__() 
        elif arg2 is None:
            super().__init__(arg1) 
        else:
            super().__init__(arg1, arg2)  
        print("ChildClass constructor called")
if __name__ == "__main__":
    obj1 = ChildClass()           
    obj2 = ChildClass(10)          
    obj3 = ChildClass(10, 20)     


//3.Apply private, public, protected and default access modifiers to the constructor


class SuperClass:
    def __init__(self):  
        print("SuperClass: Public constructor called")

    def _protected_constructor(self):  
        print("SuperClass: Protected constructor called")

    def __private_constructor(self): 
        print("SuperClass: Private constructor called")

class ChildClass(SuperClass):
    def __init__(self, arg1=None, arg2=None, access_type='public'):
        if access_type == 'public':
            super().__init__() 
        elif access_type == 'protected':
            super()._protected_constructor() 
        elif access_type == 'private':
            try:
                super()._SuperClass__private_constructor() 
            except AttributeError:
                print("Private constructor cannot be accessed directly")
        else:
            print("Invalid access type")
        print("ChildClass constructor called")
if __name__ == "__main__":
    obj1 = ChildClass()                   
    obj2 = ChildClass(access_type='protected') 
    obj3 = ChildClass(access_type='private')   


//4.Write a program which illustrates the concept of attributes of a constructor.


class Person:
    def __init__(self, name, age):
        self.name = name  
        self._age = age 
        self.__id = 1001 
        print("Constructor called and attributes initialized")

    def display(self):
        print(f"Name: {self.name}, Age: {self._age}")
        print(f"ID (private): {self.__id}")
if __name__ == "__main__":
    person1 = Person("Alice", 25)
    person1.display()
    print(f"Accessing public attribute: {person1.name}")
    print(f"Accessing protected attribute: {person1._age}")
    try:
        print(f"Accessing private attribute: {person1.__id}")
    except AttributeError:
        print("Cannot access private attribute directly")
    print(f"Accessing private attribute using name mangling: {person1._Person__id}")



















































